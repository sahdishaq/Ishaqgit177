import numpy as np

Laport pandas as pd

from sklearn.linear model Import SGDClassifier

from sklearn.preprocessing import StandardScaler

from sklearn.metrics import classification report, confusion matrix, accuracy score from sklearn.model selection import train test split

from datetime import datetime

def generate data (n samples-1000, anomaly ratio=0.2):

healthy np.random.normal(loc-0.0, scale=1.0, size(int(n_samples (1 anoma

damaged np.random.normal (loc=3.0, scale=1.5, size=(int (n samples anomaly ra

data = np.vstack((healthy, damaged])

labels np.array([0] healthy.shape[0]+ [1] damaged.shape[0])

return data, labels

def extract features(data):

features = []

for signal in data:

features.append([

np.mean(signal),

np.std(signal),

np.sqrt(np.mean (signal. pd.Series(signal).kurt(), 2)),

pd.Series(signal).skew()

return np.array(features)

def simulate streaming data (n events=5):

def simulate streaming dan events-5):

return [np.random.normal(loc-np.random.choice ([0.0, 3.0], p=[0.8, 0.2]), scale=1.2, size=100)

for in range(n_events) |

def is event (signal, threshold=2.5):

return np.sqrt(np.mean(signal *2))> threshold

X raw, y generate data()

X_feat extract_features (X_raw)

X_train, X test, y train, y test = train_test_split(X_feat, y, test size=0.3, random_state=42)

scaler StandardScaler ()

train scaled scaler.fit transform(X train)

X test scaled scaler.transform(X test)

clf=SGDClassifier(loss='log loss', max_iter-1000, random_state=42)

clf.partial fit(X train scaled, y train, classes np.unique(y))

y pred clf.predict(X_test_scaled)

initial_report classification_report(y_test, y pred, output_dict=True)

conf matrix confusion matrix(y test, y pred)

accuracy accuracy_score (y_test, y pred)
event data simulate_streaming_data()

event logs 日

for i, signal in enumerate (event data):

event. id 1+1

timestamp datetime.now().strftime('BY-am-%d %H:%M:%S')

rms np.sqrt(np.mean (signal **2))

if is event (signal):

features extract features ([signal])

scaled features scaler.transform(features) prediction clf.predict (scaled features) [0]

true label 1 if np.mean (signal) > 1.5 else 0

clf.partial fit (scaled features, [true_label])

online update

event_logs.append({

'timestamp': timestamp,

'event id: event id, rms: round(rms, 2), 'predicted': 'DAMAGED' if prediction else 'HEALTHY', 'actual': 'DAMAGED' if true label else 'HEALTHY })

else:

event_logs.append({

'timestamp': timestamp,

'event id': event id,

rms': round(rms, 2), 'predicted': 'NO ACTION', 'actual': 'N/A'
event_df pd. DataFrame (event_logs)

print("\nEvent Prediction Logs:\n", event df) print("\nInitial Model Report:\n", classification report (y test, y pred))

print("\nConfusion Matrix:\n", conf matrix) print("\nAccuracy Score:", accuracy)
